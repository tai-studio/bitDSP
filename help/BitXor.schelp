class:: BitXor
summary:: bit-wise xor
related:: Classes/BitAnd Classes/BitNot Classes/BitOr Classes/DBitAnd Classes/DBitOr Classes/DBitNot Classes/DBitXor
categories:: UGens>BitDSP

description::

bit-wise xor.

classmethods::

method::ar, kr, ir

argument::in1
input treated as code::uint16::, See link::Classes/BitVal:: for details.

argument::in2
input treated as code::uint16::, See link::Classes/BitVal:: for details.

examples::

function tests
code::
{BitPrint.kr(BitXor.kr(BitVal.kr(2r0110), BitVal.kr(2r1010)), Impulse.kr(0))}.plot(0.1)
// bit: 2r0000000000001100
{BitPrint.ar(BitXor.ar(BitVal.ar(2r0110), BitVal.ar(2r1010)), Impulse.ar(0))}.plot(0.1)
// bit: 2r0000000000001100
::

sound test

code::
(
{
	var freq= MouseX.kr(0.0001, 2);
	var size = 6;
	var offset = MouseY.kr(0, 32-size);
	BitXor.ar(LFTri.ar(freq), size,  offset)
}.play
)
::


Banger.
code::
Ndef(\fmBanger).edit;
Ndef(\verb).edit;

Ndef(\fmBanger).set(\carFreq, 42);
Ndef(\fmBanger).set(\carFreq, 52);
Ndef(\fmBanger).set(\carFreq, 32);
Ndef(\fmBanger).set(\carFreq, 67);

(
// banger
Ndef(\fmBanger, {|carFreq = 67|
	var size = 3;
	var offset = (19..32-size).clump(2).flop.collect{|row, i| i.odd.if({row.reverse}, {row})}.lace;
	var lfFreq = LFPulse.kr(0.5).range(4/3, 4);
	var dac = BitXor.kr(SinOsc.kr(lfFreq), size,  offset);
	var snd;
	var wet = LFSaw.kr(0.25, 1).range(0, 1);
	
	snd = Splay.ar(
		Mix([
			SinOscFB.ar(
				carFreq, 
				dac.range(0, 2);
			),
			DelayL.ar(
				SinOsc.ar(
					carFreq,
					dac.range(-pi, pi)
				), 0.2, 0.0076
			)
		]),
		0.1
	).clip(-1, 1);
	
	SelectX.ar(wet, [snd, Squiz.ar(snd)])
}).play
)


Ndef(\verb, {
	JPverb.ar(Ndef(\fmBanger).ar, damp: 0.8)
})
::
